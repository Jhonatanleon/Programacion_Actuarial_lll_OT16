###tercer nivel
Encabezado
#primer nivel
##segundo nivel
###tercer nivel
a <- available.packages()
head(a,3)
head(row.names(a)3)
head(rownames(a)3)
head()
head(rownames(a),3)
n <- signif(nrow(a),2)
n <- signif(nrow(a),2)
n
install.packages("ggplot2")
source("http://bioconductor.org/bioclife.R")
source("http://bioconductor.org/biocLife.R")
source("http://bioconductor.org/biocLite.R")
install.packages()
installed.packages()
library(ggploy2)
library(ggplot2)
require(ggplot2)
install.packages("Rtools")
install.packages("devtools")
x <- 1
print(x)
x
msg <- "Hola"
msg
x <- ##Esto es un comentario
x
x <- 1:20
x
x3
?vector
?vector
vector(mode= "numeric", length = 5)
a <- vector(mode= "numeric", length = 5)
1/3
1L/3
1/3l
1.5L
class(1)
class(1L)
1/0
0/0
attributes(arquality)
attributes(airquality)
# clase del 25/08/2016
# crear vectores
x <- vector("numeric", length = 5L)
# clase del 25/08/2016
# crear vectores
x <- vector("numeric", length = 5L)
x
x <- c(0.5,0.6)
claas(x)
class(x)
<- c(True, Flase)
<- c(True, Flase)
x <- c(TRUE, FALSE)
x <- c(TRUE, FALSE, T , F)
x <- 5:10
x
class(x)
x <- 10:0
x
class(x)
x <- c(1+2i,5,3+9i,-4-5i)
x
class(x)
x <- c("a", "b", "c", "d")
x
calss(x)
x <- c("a", "b", "c", "d")
x
class(x)
y <- c(1,7 "a")  #caracter
y <- c(TRUE,2)   #numerico
y <- c("a", TRUE)
y
y <- c(1,7 "a")  #caracter
y <- c(1.7, "a")  #caracter
y
class(y)
y <- c(TRUE,2)   #numerico
y
class(y)
y <- c("a", TRUE) #caracter
y
class(y)
y <- c(TRUE, 10L, 8.5, 1+1i, "Nacho")
y <- c(TRUE, 10L, 8.5, 1+1i, "Nacho")
y <- c(TRUE, 10L, 8.5, 1+1i, "Nacho")
y
class(y)
y <- c(TRUE, 10L, 8.5, 1+1i)
y
class(y)
y <- c(TRUE, 10L, 8.5)
y
class(y)
y <- c(TRUE, 10L)
y
class(y)
y <- c(TRUE)
y
class(y)
z <- 0:6
class(z)
as.numeric(z)
z <- 0:6
class(z)
as.numeric(z)
as.logical(z)
as.logical(z)
z <- 0:6
class(z)
as.numeric(z)
as.logical(z)
as.character(z)
z <- c(1+2i, 3-4i, 8, 0-3i, 0)
as.logical(z)
z<- c("Progamación", "Actuarial", "III")
as.numeric(z)
z<- c("Progamación", "Actuarial", "III")
as.numeric(z)
as.logical(z)
as.complex(z)
x <- list(1,"a", TRUE, 1+4i)
x
class(x)
?matrix
m <- matrix(nrow=2, ncol=3)
m
dim(m)
attributes(m)
install.packages("rmarkdown")
?matrix
m <- matrix(nrow=2, ncol=3)
m
dim(m)
attributes(m)
dim(m) <- c(3,2)
m
m <- matrix(1:6,3,2)
m
m <- matrix(1:6,3,2,TRUE)
m
m <- matrix(1:6,3,3,T)
m
CLASS(m)
class(m)
str(m)
dim(m) <- c(2,5)
x <- c(1,2,3)
y <- c("a","b","c")
z <- c(x,y)
x <- c(1,2,3)
y <- c("a","b","c")
z <- c(x,y)
z
m1 <- rbind(m,x)
m1
m2 <- cbind(m,x)
m2
m3 <- rbind(m1,y)
m3
m4 <- cbind(m2,y)
m4
source('~/vectores y matrices .R')
source('~/vectores y matrices .R')
source('~/vectores y matrices .R')
---
---
title: "Calificaciones"
author: "Jhonatan Rafael Leon Hernandez"
date: "29 de agosto de 2016"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
---
title: "Calificaciones"
author: "Jhonatan Rafael Leon Hernandez"
date: "29 de agosto de 2016"
output: html_document
output: html_document
```{r setup, include=FALSE}
r
Encabezado
* 3er Elemento
#***primer nivel***
## segundo nivel
###tercer nivel
lista
* 1er Elemento
* 2do Elemento
* 3er Elemento
Encabezado
#***primer nivel***
## segundo nivel
###tercer nivel
lista
* 1er Elemento
* 2do Elemento
* 3er Elemento
Encabezado
#***primer nivel***
## segundo nivel
###tercer nivel
Encabezado
#***primer nivel***
## segundo nivel
###tercer nivel
Encabezado
#***primer nivel***
## segundo nivel
###tercer nivel
Encabezado
#***primer nivel***
## segundo nivel
###tercer nivel
---
title: "Calificaciones"
author: "Jhonatan Rafael Leon Hernandez"
date: "29 de agosto de 2016"
output: pdf_document
---
Encabezado
#***primer nivel***
## segundo nivel
###tercer nivel
lista
* 1er Elemento
* 2do Elemento
* 3er Elemento
---
---
Encabezado
#***primer nivel***
title: "calificaciones"
#***primer nivel***
## segundo nivel
###tercer nivel
rmarkdown::Encabezado
#***primer nivel***
## segundo nivel
###tercer nivel
lista
* 1er Elemento
* 2do Elemento
* 3er Elemento
---
title: "Calificaciones"
author: "Jhonatan Rafael Leon Hernandez"
date: "29 de agosto de 2016"
output: pdf_document
----
###calificaciones
##primer semestre
* Matematicas Básicas 5
* Problemas matemáticas Básicas 5
* Programación Actuarial 5
* DHPC 8
* Conceptos De Calculo 7
* Introducción a la Profesión Actuarial 5
##segundo semestre
*Teoria del interes I 7
*Microeconomia 6
*Matematicas Basicas 6
*Problemas de matematicas Basicas 6
*Teoria de Ecuaciones 7
*FHS 5
##Tercer semestre
*Programacion Actuarial I  10
*Teoria del Interes II 9
*Macroeconomia 8
*Calculo Diferencial 8
*Algebra Lineal 5
##Cuarto semestre
*Contabilidad General 7
*Sistema Financiero Mexicano 8
*Introduccion a la Profesion Actuarial 9
*Calculo Integral 7
*Algebra Lineal 8
##Quinto Semestre
*Programacion Acutarial II
*Calculo Diferencial en Varias Variables
*Ecuaciones Diferenciales
*Probabilidad I
*FHS
*FHS*
?sapply
getwd()
setwd("~/GitHub/Programacion_Actuarial_lll_OT16")
data <- read.csv("DAtos_S&P.csv")
data <- read.table("DAtos_S&P.csv",T,",", nrow=100,skip=5)
clases <-sapply(data,class)
data
View(data)
getwd()
setwd("~/GitHub/Programacion_Actuarial_lll_OT16")
data <- read.csv("DAtos_S&P.csv")
data <- read.table("DAtos_S&P.csv",T,",", nrow=100,skip=5)
clases <-sapply(data,class)
data <- read.table("DAtos_S&P.csv",T,",", coolclasses=clases)
data
data <- read.table("DAtos_S&P.csv",T,",", colclasses=clases)
data
?read.table
data <- read.table("DAtos_S&P.csv",T,",", colClasses=clases)
data
clases <-sapply(data,class)
clases
data <- read.table("DAtos_S&P.csv",T,",", colClasses=clases)
data
y <- data.frame(a=1, b="a")
dput(y)
dput(y, file= "y.R")
nueva.y <- dget("y.R")
y
nueva.y
x <- "Programacion Actuarial III"
y <- data.frame(a=1, b="a")
dump(c("x","y"), file="data.R")
rm(x,y)
source("data.R")
x
y
head(airquality)
head(airquality)
x <- head(airquality)
dput(x, file= "airquality.R-JHONATAN")
head(airquality)
x <- head(airquality)
dput(x, file= "airquality.R-JHONATAN.R")
x
source("airquality.R-JHONATAN.R")
source("airquality.R-JHONATAN.R")
x <- airquality
dput(x, file= "airquality.JHONATAN.R")
x
con <- url("http://www.fcfm.buap.mx/","r")
x <.readLines(con,7)
x
"<!DOCTYPE thml>"
"<html lang=\"es\"prefix=\"og: http://ogp.me/ns#\">"
"<head>
"\t<!-- Encoding type -->"
"\t<meta charset=\"UTF --8\">"
"\t<title>FCFM::Facultad de Ciencias Fisico Matematicas de la BUAP</title>"
con <- url("http://www.fcfm.buap.mx/","r")
x <.readLines(con,7)
x
"<!DOCTYPE thml>"
"<html lang=\"es\"prefix=\"og: http://ogp.me/ns#\">"
"<head>"
"\t<!-- Encoding type -->"
"\t<meta charset=\"UTF --8\">"
"\t<title>FCFM::Facultad de Ciencias Fisico Matematicas de la BUAP</title>"
con <- url("http://www.fcfm.buap.mx/","r")
x <.readLines(con,7)
x
"<!DOCTYPE thml>"
"<html lang=\"es\"prefix=\"og: http://ogp.me/ns#\">"
"<head>"
"\t<!-- Encoding type -->"
"\t<meta charset=\"UTF --8\">"
"\t<title>FCFM::Facultad de Ciencias Fisico Matematicas de la BUAP</title>"
con <- url("http://www.fcfm.buap.mx/","r")
x <.readLines(con,7)
x
"<!DOCTYPE thml>"
"<html lang=\"es\"prefix=\"og: http://ogp.me/ns#\">"
"<head>"
"\t<!-- Encoding type -->"
"\t<meta charset=\"UTF --8\">"
"\t<title>FCFM::Facultad de Ciencias Fisico Matematicas de la BUAP</title>"
#creamos un vector
x<- c("a","b","c","c","d","e")
#veamos el vector
x
#extraemos elementos con []
x[1]
x[2]
#Tambien podemos extraer una secuencia de elementos
x[1:4]
#es posible extraer los elementos que cumple una restriccion
x[x>"b"]
#de manera equivalente se puede obtener un vector logico
u <- x =="c"
u
x[u]
#creamos un vector
x<- c("a","b","c","c","d","e")
#veamos el vector
x
#extraemos elementos con []
x[1]
x[2]
#Tambien podemos extraer una secuencia de elementos
x[1:4]
#es posible extraer los elementos que cumple una restriccion
x[x>"b"]
#de manera equivalente se puede obtener un vector logico
u <- x =="c"
u
x[u]
#creamos una lista
x<- list(foo=1:4, bas= 0.6)
#extraemos el primer elemento de la lista,
#este elemento es una lista que contiene una secuencia
x[1]
$foo
#extraemos nuevamente el primer elemento de la lita
#ahorael elemento es la secuencia en si
x[1]
#extraemos un elemento por nombre
x$bar
X[["bar"]]
X["bar"]
#creamos una lista
x<- list(foo=1:4, bas= 0.6)
#extraemos el primer elemento de la lista,
#este elemento es una lista que contiene una secuencia
x[1]
$foo
#extraemos nuevamente el primer elemento de la lita
#ahorael elemento es la secuencia en si
x[1]
#extraemos un elemento por nombre
x$bar
x[["bar"]]
x["bar"]
